name: CI

on:
  push:
    paths-ignore:
    - '.devcontainer/**'
    - 'examples/**'
    - 'lib/**'
    - 'man/**'
    - 'priv/**'
    - '**.md'
  pull_request:
    paths-ignore:
    - '.devcontainer/**'
    - 'examples/**'
    - 'lib/**'
    - 'man/**'
    - 'priv/**'
    - '**.md'

jobs:

  tests:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        otp: ['27']
    runs-on: ubuntu-20.04
    services:
      redis:
        image: redis
        ports:
        - 6379:6379

    steps:

    - uses: actions/checkout@v4

    - name: Test shell scripts
      if: matrix.otp == '26'
      run: |
        shellcheck test/ejabberd_SUITE_data/gencerts.sh
        shellcheck tools/captcha.sh
        shellcheck ejabberd.init.template
        shellcheck -x ejabberdctl.template

    - name: Get specific Erlang/OTP
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}

    - name: Get a compatible Rebar3
      if: matrix.otp < 24
      run: |
        rm rebar3
        wget https://github.com/processone/ejabberd/raw/21.12/rebar3
        chmod +x rebar3

    - name: Install MS SQL Server
      run: |
        docker run -d -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=ejabberd_Test1" \
                   -v $(pwd)/test/docker/db/mssql/initdb/initdb_mssql.sql:/initdb_mssql.sql:ro \
                   -v $(pwd)/sql/mssql.sql:/mssql.sql:ro \
                   -v $(pwd)/sql/mssql.new.sql:/mssql.new.sql:ro \
                   -p 1433:1433 --name ejabberd-mssql "mcr.microsoft.com/mssql/server:2019-latest"
        sleep 10

    - name: Prepare databases
      run: |
        docker exec ejabberd-mssql /opt/mssql-tools18/bin/sqlcmd -C -U SA -P ejabberd_Test1 -S localhost -i /initdb_mssql.sql
        docker exec ejabberd-mssql /opt/mssql-tools18/bin/sqlcmd -C -U SA -P ejabberd_Test1 -S localhost -d ejabberd_test -i /mssql.sql
        sudo systemctl start mysql.service
        sudo systemctl start postgresql.service
        mysql -u root -proot -e "CREATE DATABASE ejabberd_test;"
        mysql -u root -proot -e "CREATE USER 'ejabberd_test'@'localhost'
                                 IDENTIFIED BY 'ejabberd_test';"
        mysql -u root -proot -e "GRANT ALL ON ejabberd_test.*
                                 TO 'ejabberd_test'@'localhost';"
        pg_isready
        sudo -u postgres psql -c "CREATE DATABASE ejabberd_test;"
        sudo -u postgres psql -c "CREATE USER ejabberd_test
                                  WITH PASSWORD 'ejabberd_test';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES
                                  ON DATABASE ejabberd_test TO ejabberd_test;"
        sudo -u postgres psql ejabberd_test -c "GRANT ALL PRIVILEGES ON ALL
                                                TABLES IN SCHEMA public
                                                TO ejabberd_test;"
        sudo -u postgres psql ejabberd_test -c "GRANT ALL PRIVILEGES ON ALL
                                                SEQUENCES IN SCHEMA public
                                                TO ejabberd_test;"

    - name: Prepare libraries
      run: |
        sudo apt-get -qq update
        sudo apt-get -y purge libgd3 nginx
        sudo apt-get -qq install libexpat1-dev libgd-dev libpam0g-dev \
                                 libsqlite3-dev libwebp-dev libyaml-dev

    - name: Remove syntax_tools from release
      run: sed -i 's|, syntax_tools||g' src/ejabberd.app.src.script

    - name: Cache Hex.pm
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/rebar3/
        key: ${{matrix.otp}}-${{hashFiles('rebar.config')}}

    - name: Download test logs
      if: matrix.otp == '26' && github.repository == 'processone/ejabberd'
      continue-on-error: true
      run: |
        mkdir -p _build/test
        curl -sSL https://github.com/processone/ecil/tarball/gh-pages |
          tar -C _build/test --strip-components=1 --wildcards -xzf -
        rm -rf _build/test/logs/last/

    - name: Compile
      run: |
        ./autogen.sh
        ./configure --with-rebar=./rebar3 \
                    --prefix=/tmp/ejabberd \
                    --enable-all \
                    --disable-elixir \
                    --disable-mssql \
                    --disable-odbc
        make

    - run: make install -s
    - run: make hooks
    - run: make options
    - run: make xref

    - name: Start Development Release
      run: |
        make dev
        RE=_build/dev/rel/ejabberd
        sed -i 's/starttls_required: true/starttls_required: false/g'  $RE/conf/ejabberd.yml
        sed -i 's/loglevel: info/loglevel: debug\nlog_rotate_size: infinity/g'  $RE/conf/ejabberd.yml
        cat $RE/conf/ejabberd.yml
        $RE/bin/ejabberdctl start
        $RE/bin/ejabberdctl started
        $RE/bin/ejabberdctl register admin localhost admin
        grep -q "is started in" $RE/logs/ejabberd.log

    - name: Run XMPP Interoperability Tests against CI server.
      uses: XMPP-Interop-Testing/xmpp-interop-tests-action@v1.3.3
      with:
        domain: 'localhost'
        adminAccountUsername: 'admin'
        adminAccountPassword: 'admin'

    - name: Stop Development Release
      run: |
        RE=_build/dev/rel/ejabberd
        $RE/bin/ejabberdctl stop
        $RE/bin/ejabberdctl stopped
        grep -q "is stopped in" $RE/logs/ejabberd.log

    - name: Upload ejabberd logs as an artifact
      if: always() # Especially when the tests fail, it's desirable to have access to these reports!
      uses: actions/upload-artifact@v4
      with:
        name: ejabberd log
        path: _build/dev/rel/ejabberd/logs/ejabberd.log
